


ARM Macro Assembler    Page 1 


    1 00000000                 PRESERVE8
    2 00000000                 THUMB
    3 00000000         
    4 00000000         
    5 00000000         ; ====================== zone de réservation de données,
                         ======================================
    6 00000000         ;Section RAM (read only) :
    7 00000000                 area             mesdata,data,readonly
    8 00000000         
    9 00000000         
   10 00000000         
   11 00000000         ;Section RAM (read write):
   12 00000000                 area             maram,data,readwrite
   13 00000000                 extern           PWM_Set_Value_TIM3_Ch3
   14 00000000         
   15 00000000 00000000 
                       SortieSon
                               dcd              0
   16 00000004                 export           SortieSon
   17 00000004 00000000 
                       Index   dcd              0
   18 00000008                 export           Index
   19 00000008                 extern           LongueurSon
   20 00000008                 extern           Son
   21 00000008         
   22 00000008         
   23 00000008         
   24 00000008         ; ======================================================
                       =========================================
   25 00000008         
   26 00000008         
   27 00000008         
   28 00000008         
   29 00000008         ;Section ROM code (read only) :  
   30 00000008                 area             moncode,code,readonly
   31 00000000         ; écrire le code ici 
   32 00000000         
   33 00000000         
   34 00000000         
   35 00000000         
   36 00000000         
   37 00000000         
   38 00000000         
   39 00000000                 export           CallBackSon
   40 00000000         CallBackSon
                               proc
   41 00000000         ;Index = Son;
   42 00000000 E92D 5000       push             {LR, R12}
   43 00000004         ;push {R12}
   44 00000004 4811            ldr              R0,=Index
   45 00000006 6801            ldr              R1,[R0]     ; On charge la vale
                                                            ur de l'index afin 
                                                            de pouvoir faire no
                                                            tre comparaison et 
                                                            l'incrémenter après
                                                            
   46 00000008         ;If(Index <= LongueurSon);
   47 00000008 4811            ldr              R0,=LongueurSon
   48 0000000A 6802            ldr              R2,[R0]



ARM Macro Assembler    Page 2 


   49 0000000C         ;subs R2,R2,#-1 
   50 0000000C 1892            adds             R2, R2,R2
   51 0000000E EBB2 0C01       subs             R12,R2,R1   ; Rize le flag Z si
                                                             equal sinon le met
                                                             à 0
   52 00000012 D104            bne              THEN        ; On fait notre com
                                                            mparaison par rappo
                                                            rt au subs du si le
                                                             flag z est levé ou
                                                             non si oui on va a
                                                            u tag sinon on cont
                                                            inue 
   53 00000014         ;Else
   54 00000014 F04F 30FF       mov              R0,#-1      ; R0 est le seul re
                                                            gistre qui fait not
                                                            re return , on renv
                                                            oie donc -1 car nou
                                                            s ne sommes pas dan
                                                            s la plage du table
                                                            au 
   55 00000018 F85D EB04       pop{LR}                      ;On récupère l'adre
                                                            sse de retour de la
                                                             pile 
   56 0000001C 4770            bx               LR
   57 0000001E         THEN
   58 0000001E 480D            ldr              R0,=Son     ; On y charge l'adr
                                                            esse ( la première 
                                                            ligne du tableau so
                                                            n )
   59 00000020 4408            add              R0,R1,R0    ; On y additionne l
                                                            a valeure de l'inde
                                                            x afin de ne pas se
                                                             retrouver avec un 
                                                            offset et être à la
                                                             bonne ligne du tab
                                                            leau
   60 00000022 4A0D            ldr              R2, =SortieSon ; On load dans R
                                                            2 l'adresse de Sort
                                                            ieSon 
   61 00000024 F9B0 3000       ldrsh            R3,[R0]     ; r3= son 
   62 00000028 F04F 005C       mov              R0,#92
   63 0000002C FB93 F3F0       sdiv             R3, R3, R0  ; calculs
   64 00000030 F44F 70B4       mov              R0,#360
   65 00000034 4403            add              R3, R3, R0
   66 00000036 8013            strh             R3,[R2]     ; sortie son = r3
   67 00000038 4618            mov              R0, R3
   68 0000003A F101 0102       add              R1,R1,#2
   69 0000003E 4B03            ldr              R3,=Index
   70 00000040 6019            str              R1,[R3]
   71 00000042         ;ldr R0, 
   72 00000042 F7FF FFFE       bl               PWM_Set_Value_TIM3_Ch3
   73 00000046         ; On récupère l'adresse d'index et on y charge le nouvel
                        index
   74 00000046         ;pop {R12}
   75 00000046 E8BD 5000       pop{LR,          R12}
   76 0000004A 4770            bx               LR
   77 0000004C                 ENDP
   78 0000004C         
   79 0000004C         



ARM Macro Assembler    Page 3 


   80 0000004C         
   81 0000004C                 END
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\obj\gestionson.d -o.\obj\gestionson.o -I.\RTE\_Simu -IC:\Program
data\Keil\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Programdata\Keil\Ar
m\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include --predefine="__EVAL SETA 1" --p
redefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 534" --predefi
ne="_RTE_ SETA 1" --predefine="STM32F10X_MD SETA 1" --predefine="_RTE_ SETA 1" 
--list=gestionson.lst Src\GestionSon.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

mesdata 00000000

Symbol: mesdata
   Definitions
      At line 7 in file Src\GestionSon.s
   Uses
      None
Comment: mesdata unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Index 00000004

Symbol: Index
   Definitions
      At line 17 in file Src\GestionSon.s
   Uses
      At line 18 in file Src\GestionSon.s
      At line 44 in file Src\GestionSon.s
      At line 69 in file Src\GestionSon.s

SortieSon 00000000

Symbol: SortieSon
   Definitions
      At line 15 in file Src\GestionSon.s
   Uses
      At line 16 in file Src\GestionSon.s
      At line 60 in file Src\GestionSon.s

maram 00000000

Symbol: maram
   Definitions
      At line 12 in file Src\GestionSon.s
   Uses
      None
Comment: maram unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CallBackSon 00000000

Symbol: CallBackSon
   Definitions
      At line 40 in file Src\GestionSon.s
   Uses
      At line 39 in file Src\GestionSon.s
Comment: CallBackSon used once
THEN 0000001E

Symbol: THEN
   Definitions
      At line 57 in file Src\GestionSon.s
   Uses
      At line 52 in file Src\GestionSon.s
Comment: THEN used once
moncode 00000000

Symbol: moncode
   Definitions
      At line 30 in file Src\GestionSon.s
   Uses
      None
Comment: moncode unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

LongueurSon 00000000

Symbol: LongueurSon
   Definitions
      At line 19 in file Src\GestionSon.s
   Uses
      At line 47 in file Src\GestionSon.s
Comment: LongueurSon used once
PWM_Set_Value_TIM3_Ch3 00000000

Symbol: PWM_Set_Value_TIM3_Ch3
   Definitions
      At line 13 in file Src\GestionSon.s
   Uses
      At line 72 in file Src\GestionSon.s
Comment: PWM_Set_Value_TIM3_Ch3 used once
Son 00000000

Symbol: Son
   Definitions
      At line 20 in file Src\GestionSon.s
   Uses
      At line 58 in file Src\GestionSon.s
Comment: Son used once
3 symbols
347 symbols in table
